<?php

declare(strict_types=1);

/**
 * Configuration
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client;

/**
 * Collection Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 *
 * @template TKey of array-key
 * @template-covariant T
 * @implements \OpenAPI\Client\CollectionInterface<TKey, T>
 */
class Collection implements CollectionInterface
{
    /** @var array<TKey, T> */
    protected array $data;

    protected int $count;

    protected int $total;

    protected int $perPage;

    protected int $currentPage;

    protected int $totalPages;

    /** @var array{next?: string, previous?: string} */
    protected array $links;

    /**
     * @param array{
     *  status: int,
     *  success: bool,
     *  data: array<T>,
     *  pagination: array{
     *    count: int,
     *    total: int,
     *    perPage: int,
     *    currentPage: int,
     *    totalPages: int,
     *    links: object{next?: string, previous?: string}
     *  }
     * } $body
     *
     * @throws \InvalidArgumentException
     *
     * @return static<TKey, T>
     */
    public static function createFromResponseBody(array $body): static
    {
        $paginationProps = [
            'count',
            'total',
            'perPage',
            'currentPage',
            'totalPages',
            'links',
        ];
        foreach (['data', 'pagination'] as $mainKey) {
            if (\array_key_exists($mainKey, $body) === false) {
                throw new \InvalidArgumentException(\sprintf('Key "%s" is required', $mainKey));
            }
        }

        foreach ($paginationProps as $property) {
            if (\property_exists($body['pagination'], $property) === false) {
                throw new \InvalidArgumentException(\sprintf('Key "%s" is required', $property));
            }
        }

        $instance = new static();
        $instance->data = $body['data'];
        $instance->count = (int) $body['pagination']->count;
        $instance->total = (int) $body['pagination']->total;
        $instance->perPage = (int) $body['pagination']->perPage;
        $instance->currentPage = (int) $body['pagination']->currentPage;
        $instance->totalPages = (int) $body['pagination']->totalPages;
        $instance->links = [];
        if (property_exists($body['pagination']->links, 'next')) {
            $instance->links['next'] = $body['pagination']->links->next;
        }
        if (property_exists($body['pagination']->links, 'previous')) {
            $instance->links['previous'] = $body['pagination']->links->previous;
        }

        return $instance;
    }

    /**
     * Retrieves an iterator to traverse this object.
     *
     * @return \ArrayIterator<TKey, T>
     */
    public function getIterator(): \Traversable
    {
        return new \ArrayIterator($this->data);
    }

    /**
     * {@inheritdoc}
     */
    public function count(): int
    {
        return $this->getCount();
    }

    /**
     * Checks whether an item in this collection exists.
     *
     * @param array-key $offset The index to check on.
     */
    public function offsetExists($offset): bool
    {
        return isset($this->data[$offset]);
    }

    /**
     * Retrieves an item from the collection with the given index.
     *
     * @param array-key $offset The offset to retrieve.
     *
     * @return ?T
     */
    public function offsetGet($offset): mixed
    {
        return $this->offsetExists($offset) ? $this->data[$offset] : null;
    }

    /**
     * Sets an item at the given index.
     *
     * @param array-key|null $offset The offset to assign the value to.
     * @param T           $value  The value to set.
     */
    public function offsetSet($offset, $value): void
    {
        if ($offset === '' || $offset === null) {
            $this->data[] = $value;
        } else {
            $this->data[$offset] = $value;
        }
    }

    /**
     * Removes an item with the given index from the collection.
     *
     * @param array-key $offset The offset to unset.
     */
    public function offsetUnset($offset): void
    {
        unset($this->data[$offset]);
    }

    /**
     * {@inheritdoc}
     */
    public function getCount(): int
    {
        return $this->count;
    }

    /**
     * {@inheritdoc}
     */
    public function getTotal(): int
    {
        return $this->total;
    }

    /**
     * {@inheritdoc}
     */
    public function getPerPage(): int
    {
        return $this->perPage;
    }

    /**
     * {@inheritdoc}
     */
    public function getCurrentPage(): int
    {
        return $this->currentPage;
    }

    /**
     * {@inheritdoc}
     */
    public function getNextPage(): ?int
    {
        return ($this->totalPages >= $this->currentPage + 1)
            ? $this->currentPage + 1
            : null;
    }

    /**
     * {@inheritdoc}
     */
    public function getTotalPages(): int
    {
        return $this->totalPages;
    }

    /**
     * {@inheritdoc}
     */
    public function hasMore(): bool
    {
        return $this->currentPage < $this->totalPages;
    }

    /**
     * {@inheritdoc}
     */
    public function getLinks(): array
    {
        return $this->links;
    }
}
