<?php

declare(strict_types=1);

/**
 * ClientBuilder
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Echo Server API
 *
 * Echo Server API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: team@openapitools.org
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\Api\AuthApi;
use OpenAPI\Client\Api\BodyApi;
use OpenAPI\Client\Api\FormApi;
use OpenAPI\Client\Api\HeaderApi;
use OpenAPI\Client\Api\PathApi;
use OpenAPI\Client\Api\QueryApi;

/**
 * ClientBuilder Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @property-read AuthApi $auth
 * @property-read BodyApi $body
 * @property-read FormApi $form
 * @property-read HeaderApi $header
 * @property-read PathApi $path
 * @property-read QueryApi $query
 */
class ClientBuilder
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Initiates new client builder with OAuth access token.
     * @link https://docs.salla.dev/docs/merchant/2fa0d7aca2def-authorization
     *
     * @param string $accessToken
     * @throws \InvalidArgumentException
     * @return ClientBuilder
     */
    public static function createWithAccessToken(
        string $accessToken
    ): static {
        if (empty($accessToken)) {
            throw new \InvalidArgumentException('Access token cannot be empty');
        }

        $config = new Configuration();
        $config->setAccessToken($accessToken);

        return new static(null, $config);
    }

    /**
     * @link https://docs.salla.dev/doc-421118
     */
    public static function createWithOAuth(
        string $clientId,
        string $clientSecret,
        string $redirectUri,
        ?string $accessToken = null,
        ?string $refreshToken = null
    ): static {
        $config = new Configuration();
        if (empty($accessToken) === false) {
            $config->setAccessToken($accessToken);
        }
        if (empty($refreshToken) === false) {
            $config->setRefreshToken($refreshToken);
        }
        $config->setOAuthProvider(new \Salla\OAuth2\Client\Provider\Salla([
            'clientId'     => $clientId,
            'clientSecret' => $clientSecret,
            'redirectUri'  => $redirectUri,
        ]));

        return new static(null, $config);
    }

    /**
     * {@inheritDoc}
     */
    public function __get(string $name)
    {
        switch ($name) {
            case 'auth':
                return new AuthApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            case 'body':
                return new BodyApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            case 'form':
                return new FormApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            case 'header':
                return new HeaderApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            case 'path':
                return new PathApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            case 'query':
                return new QueryApi($this->client, $this->config, $this->headerSelector, $this->hostIndex);
            default:
                throw new \InvalidArgumentException(\sprintf('Unknown property "%s"', $name));
        }
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }
}
