<?php
/**
 * BodyApiInterface
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Echo Server API
 *
 * Echo Server API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: team@openapitools.org
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;

/**
 * BodyApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
interface BodyApiInterface
{
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'testBinaryGif' => [
            'application/json',
        ],
        'testBodyApplicationOctetstreamBinary' => [
            'application/octet-stream',
        ],
        'testBodyMultipartFormdataArrayOfBinary' => [
            'multipart/form-data',
        ],
        'testBodyMultipartFormdataSingleBinary' => [
            'multipart/form-data',
        ],
        'testEchoBodyAllOfPet' => [
            'application/json',
        ],
        'testEchoBodyFreeFormObjectResponseString' => [
            'application/json',
        ],
        'testEchoBodyPet' => [
            'application/json',
        ],
        'testEchoBodyPetResponseString' => [
            'application/json',
        ],
        'testEchoBodyStringEnum' => [
            'application/json',
        ],
        'testEchoBodyTagResponseString' => [
            'application/json',
        ],
    ];

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void;

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int;

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration;

    /**
     * Operation testBinaryGif
     *
     * Test binary (gif) response body
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBinaryGif'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SplFileObject
     */
    public function testBinaryGif(
        string $contentType = self::contentTypes['testBinaryGif'][0]
    ): \SplFileObject;

    /**
     * Operation testBinaryGifWithHttpInfo
     *
     * Test binary (gif) response body
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBinaryGif'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function testBinaryGifWithHttpInfo(
        string $contentType = self::contentTypes['testBinaryGif'][0]
    ): array;

    /**
     * Operation testBinaryGifAsync
     *
     * Test binary (gif) response body
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBinaryGif'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBinaryGifAsync(
        string $contentType = self::contentTypes['testBinaryGif'][0]
    ): PromiseInterface;

    /**
     * Operation testBinaryGifAsyncWithHttpInfo
     *
     * Test binary (gif) response body
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBinaryGif'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBinaryGifAsyncWithHttpInfo(
        string $contentType = self::contentTypes['testBinaryGif'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testBinaryGif'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBinaryGif'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testBinaryGifRequest(
        string $contentType = self::contentTypes['testBinaryGif'][0]
    ): Request;
    /**
     * Operation testBodyApplicationOctetstreamBinary
     *
     * Test body parameter(s)
     *
     * @param  \SplFileObject|null $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyApplicationOctetstreamBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testBodyApplicationOctetstreamBinary(
        ?\SplFileObject $body = null,
        string $contentType = self::contentTypes['testBodyApplicationOctetstreamBinary'][0]
    ): string;

    /**
     * Operation testBodyApplicationOctetstreamBinaryWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \SplFileObject|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyApplicationOctetstreamBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testBodyApplicationOctetstreamBinaryWithHttpInfo(
        ?\SplFileObject $body = null,
        string $contentType = self::contentTypes['testBodyApplicationOctetstreamBinary'][0]
    ): array;

    /**
     * Operation testBodyApplicationOctetstreamBinaryAsync
     *
     * Test body parameter(s)
     *
     * @param  \SplFileObject|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyApplicationOctetstreamBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyApplicationOctetstreamBinaryAsync(
        ?\SplFileObject $body = null,
        string $contentType = self::contentTypes['testBodyApplicationOctetstreamBinary'][0]
    ): PromiseInterface;

    /**
     * Operation testBodyApplicationOctetstreamBinaryAsyncWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \SplFileObject|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyApplicationOctetstreamBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyApplicationOctetstreamBinaryAsyncWithHttpInfo(
        $body = null,
        string $contentType = self::contentTypes['testBodyApplicationOctetstreamBinary'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testBodyApplicationOctetstreamBinary'
     *
     * @param  \SplFileObject|null $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyApplicationOctetstreamBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testBodyApplicationOctetstreamBinaryRequest(
        $body = null,
        string $contentType = self::contentTypes['testBodyApplicationOctetstreamBinary'][0]
    ): Request;
    /**
     * Operation testBodyMultipartFormdataArrayOfBinary
     *
     * Test array of binary in multipart mime
     *
     * @param  \SplFileObject[] $files files (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataArrayOfBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testBodyMultipartFormdataArrayOfBinary(
        array $files,
        string $contentType = self::contentTypes['testBodyMultipartFormdataArrayOfBinary'][0]
    ): string;

    /**
     * Operation testBodyMultipartFormdataArrayOfBinaryWithHttpInfo
     *
     * Test array of binary in multipart mime
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataArrayOfBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testBodyMultipartFormdataArrayOfBinaryWithHttpInfo(
        array $files,
        string $contentType = self::contentTypes['testBodyMultipartFormdataArrayOfBinary'][0]
    ): array;

    /**
     * Operation testBodyMultipartFormdataArrayOfBinaryAsync
     *
     * Test array of binary in multipart mime
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataArrayOfBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyMultipartFormdataArrayOfBinaryAsync(
        array $files,
        string $contentType = self::contentTypes['testBodyMultipartFormdataArrayOfBinary'][0]
    ): PromiseInterface;

    /**
     * Operation testBodyMultipartFormdataArrayOfBinaryAsyncWithHttpInfo
     *
     * Test array of binary in multipart mime
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataArrayOfBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyMultipartFormdataArrayOfBinaryAsyncWithHttpInfo(
        $files,
        string $contentType = self::contentTypes['testBodyMultipartFormdataArrayOfBinary'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testBodyMultipartFormdataArrayOfBinary'
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataArrayOfBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testBodyMultipartFormdataArrayOfBinaryRequest(
        $files,
        string $contentType = self::contentTypes['testBodyMultipartFormdataArrayOfBinary'][0]
    ): Request;
    /**
     * Operation testBodyMultipartFormdataSingleBinary
     *
     * Test single binary in multipart mime
     *
     * @param  \SplFileObject|null $my_file my_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataSingleBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testBodyMultipartFormdataSingleBinary(
        ?\SplFileObject $my_file = null,
        string $contentType = self::contentTypes['testBodyMultipartFormdataSingleBinary'][0]
    ): string;

    /**
     * Operation testBodyMultipartFormdataSingleBinaryWithHttpInfo
     *
     * Test single binary in multipart mime
     *
     * @param  \SplFileObject|null $my_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataSingleBinary'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testBodyMultipartFormdataSingleBinaryWithHttpInfo(
        ?\SplFileObject $my_file = null,
        string $contentType = self::contentTypes['testBodyMultipartFormdataSingleBinary'][0]
    ): array;

    /**
     * Operation testBodyMultipartFormdataSingleBinaryAsync
     *
     * Test single binary in multipart mime
     *
     * @param  \SplFileObject|null $my_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataSingleBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyMultipartFormdataSingleBinaryAsync(
        ?\SplFileObject $my_file = null,
        string $contentType = self::contentTypes['testBodyMultipartFormdataSingleBinary'][0]
    ): PromiseInterface;

    /**
     * Operation testBodyMultipartFormdataSingleBinaryAsyncWithHttpInfo
     *
     * Test single binary in multipart mime
     *
     * @param  \SplFileObject|null $my_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataSingleBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testBodyMultipartFormdataSingleBinaryAsyncWithHttpInfo(
        $my_file = null,
        string $contentType = self::contentTypes['testBodyMultipartFormdataSingleBinary'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testBodyMultipartFormdataSingleBinary'
     *
     * @param  \SplFileObject|null $my_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testBodyMultipartFormdataSingleBinary'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testBodyMultipartFormdataSingleBinaryRequest(
        $my_file = null,
        string $contentType = self::contentTypes['testBodyMultipartFormdataSingleBinary'][0]
    ): Request;
    /**
     * Operation testEchoBodyAllOfPet
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyAllOfPet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\Pet
     */
    public function testEchoBodyAllOfPet(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyAllOfPet'][0]
    ): \OpenAPI\Client\Model\Pet;

    /**
     * Operation testEchoBodyAllOfPetWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyAllOfPet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Pet, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyAllOfPetWithHttpInfo(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyAllOfPet'][0]
    ): array;

    /**
     * Operation testEchoBodyAllOfPetAsync
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyAllOfPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyAllOfPetAsync(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyAllOfPet'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyAllOfPetAsyncWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyAllOfPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyAllOfPetAsyncWithHttpInfo(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyAllOfPet'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyAllOfPet'
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyAllOfPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyAllOfPetRequest(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyAllOfPet'][0]
    ): Request;
    /**
     * Operation testEchoBodyFreeFormObjectResponseString
     *
     * Test free form object
     *
     * @param  object|null $body Free form object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyFreeFormObjectResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testEchoBodyFreeFormObjectResponseString(
        ?array $body = null,
        string $contentType = self::contentTypes['testEchoBodyFreeFormObjectResponseString'][0]
    ): string;

    /**
     * Operation testEchoBodyFreeFormObjectResponseStringWithHttpInfo
     *
     * Test free form object
     *
     * @param  object|null $body Free form object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyFreeFormObjectResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyFreeFormObjectResponseStringWithHttpInfo(
        ?array $body = null,
        string $contentType = self::contentTypes['testEchoBodyFreeFormObjectResponseString'][0]
    ): array;

    /**
     * Operation testEchoBodyFreeFormObjectResponseStringAsync
     *
     * Test free form object
     *
     * @param  object|null $body Free form object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyFreeFormObjectResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyFreeFormObjectResponseStringAsync(
        ?array $body = null,
        string $contentType = self::contentTypes['testEchoBodyFreeFormObjectResponseString'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyFreeFormObjectResponseStringAsyncWithHttpInfo
     *
     * Test free form object
     *
     * @param  object|null $body Free form object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyFreeFormObjectResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyFreeFormObjectResponseStringAsyncWithHttpInfo(
        $body = null,
        string $contentType = self::contentTypes['testEchoBodyFreeFormObjectResponseString'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyFreeFormObjectResponseString'
     *
     * @param  object|null $body Free form object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyFreeFormObjectResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyFreeFormObjectResponseStringRequest(
        $body = null,
        string $contentType = self::contentTypes['testEchoBodyFreeFormObjectResponseString'][0]
    ): Request;
    /**
     * Operation testEchoBodyPet
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\Pet
     */
    public function testEchoBodyPet(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPet'][0]
    ): \OpenAPI\Client\Model\Pet;

    /**
     * Operation testEchoBodyPetWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Pet, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyPetWithHttpInfo(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPet'][0]
    ): array;

    /**
     * Operation testEchoBodyPetAsync
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyPetAsync(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPet'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyPetAsyncWithHttpInfo
     *
     * Test body parameter(s)
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyPetAsyncWithHttpInfo(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPet'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyPet'
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyPetRequest(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPet'][0]
    ): Request;
    /**
     * Operation testEchoBodyPetResponseString
     *
     * Test empty response body
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPetResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testEchoBodyPetResponseString(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPetResponseString'][0]
    ): string;

    /**
     * Operation testEchoBodyPetResponseStringWithHttpInfo
     *
     * Test empty response body
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPetResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyPetResponseStringWithHttpInfo(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPetResponseString'][0]
    ): array;

    /**
     * Operation testEchoBodyPetResponseStringAsync
     *
     * Test empty response body
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPetResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyPetResponseStringAsync(
        ?\OpenAPI\Client\Model\Pet $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPetResponseString'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyPetResponseStringAsyncWithHttpInfo
     *
     * Test empty response body
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPetResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyPetResponseStringAsyncWithHttpInfo(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPetResponseString'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyPetResponseString'
     *
     * @param  \OpenAPI\Client\Model\Pet|null $pet Pet object that needs to be added to the store (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyPetResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyPetResponseStringRequest(
        $pet = null,
        string $contentType = self::contentTypes['testEchoBodyPetResponseString'][0]
    ): Request;
    /**
     * Operation testEchoBodyStringEnum
     *
     * Test string enum response body
     *
     * @param  string|null $body String enum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyStringEnum'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\StringEnumRef
     */
    public function testEchoBodyStringEnum(
        ?string $body = null,
        string $contentType = self::contentTypes['testEchoBodyStringEnum'][0]
    ): \OpenAPI\Client\Model\StringEnumRef;

    /**
     * Operation testEchoBodyStringEnumWithHttpInfo
     *
     * Test string enum response body
     *
     * @param  string|null $body String enum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyStringEnum'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StringEnumRef, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyStringEnumWithHttpInfo(
        ?string $body = null,
        string $contentType = self::contentTypes['testEchoBodyStringEnum'][0]
    ): array;

    /**
     * Operation testEchoBodyStringEnumAsync
     *
     * Test string enum response body
     *
     * @param  string|null $body String enum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyStringEnum'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyStringEnumAsync(
        ?string $body = null,
        string $contentType = self::contentTypes['testEchoBodyStringEnum'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyStringEnumAsyncWithHttpInfo
     *
     * Test string enum response body
     *
     * @param  string|null $body String enum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyStringEnum'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyStringEnumAsyncWithHttpInfo(
        $body = null,
        string $contentType = self::contentTypes['testEchoBodyStringEnum'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyStringEnum'
     *
     * @param  string|null $body String enum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyStringEnum'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyStringEnumRequest(
        $body = null,
        string $contentType = self::contentTypes['testEchoBodyStringEnum'][0]
    ): Request;
    /**
     * Operation testEchoBodyTagResponseString
     *
     * Test empty json (request body)
     *
     * @param  \OpenAPI\Client\Model\Tag|null $tag Tag object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyTagResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string
     */
    public function testEchoBodyTagResponseString(
        ?\OpenAPI\Client\Model\Tag $tag = null,
        string $contentType = self::contentTypes['testEchoBodyTagResponseString'][0]
    ): string;

    /**
     * Operation testEchoBodyTagResponseStringWithHttpInfo
     *
     * Test empty json (request body)
     *
     * @param  \OpenAPI\Client\Model\Tag|null $tag Tag object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyTagResponseString'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function testEchoBodyTagResponseStringWithHttpInfo(
        ?\OpenAPI\Client\Model\Tag $tag = null,
        string $contentType = self::contentTypes['testEchoBodyTagResponseString'][0]
    ): array;

    /**
     * Operation testEchoBodyTagResponseStringAsync
     *
     * Test empty json (request body)
     *
     * @param  \OpenAPI\Client\Model\Tag|null $tag Tag object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyTagResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyTagResponseStringAsync(
        ?\OpenAPI\Client\Model\Tag $tag = null,
        string $contentType = self::contentTypes['testEchoBodyTagResponseString'][0]
    ): PromiseInterface;

    /**
     * Operation testEchoBodyTagResponseStringAsyncWithHttpInfo
     *
     * Test empty json (request body)
     *
     * @param  \OpenAPI\Client\Model\Tag|null $tag Tag object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyTagResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function testEchoBodyTagResponseStringAsyncWithHttpInfo(
        $tag = null,
        string $contentType = self::contentTypes['testEchoBodyTagResponseString'][0]
    ): PromiseInterface;

    /**
     * Create request for operation 'testEchoBodyTagResponseString'
     *
     * @param  \OpenAPI\Client\Model\Tag|null $tag Tag object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['testEchoBodyTagResponseString'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testEchoBodyTagResponseStringRequest(
        $tag = null,
        string $contentType = self::contentTypes['testEchoBodyTagResponseString'][0]
    ): Request;
}
